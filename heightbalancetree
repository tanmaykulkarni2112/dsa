class TreeNode:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.left = None
        self.right = None
        self.height = 1

class AVLTree:
    def __init__(self):
        self.root = None

    # Function to get height of the node
    def get_height(self, node):
        if node is None:
            return 0
        return node.height

    # Function to get balance factor of the node
    def get_balance(self, node):
        if node is None:
            return 0
        return self.get_height(node.left) - self.get_height(node.right)

    # Function to perform left rotation
    def left_rotate(self, z):
        y = z.right
        T2 = y.left
        y.left = z
        z.right = T2
        z.height = 1 + max(self.get_height(z.left), self.get_height(z.right))
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))
        return y

    # Function to perform right rotation
    def right_rotate(self, z):
        y = z.left
        T3 = y.right
        y.right = z
        z.left = T3
        z.height = 1 + max(self.get_height(z.left), self.get_height(z.right))
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))
        return y

    # Function to insert a node with key and value
    def insert(self, node, key, value):
        if node is None:
            return TreeNode(key, value)
        if key < node.key:
            node.left = self.insert(node.left, key, value)
        elif key > node.key:
            node.right = self.insert(node.right, key, value)
        else:
            # Key already exists, update the value
            node.value = value
            return node

        # Update height of the current node
        node.height = 1 + max(self.get_height(node.left), self.get_height(node.right))

        # Get the balance factor
        balance = self.get_balance(node)

        # Rebalance the tree if needed
        if balance > 1:
            if key < node.left.key:
                return self.right_rotate(node)
            else:
                node.left = self.left_rotate(node.left)
                return self.right_rotate(node)
        elif balance < -1:
            if key > node.right.key:
                return self.left_rotate(node)
            else:
                node.right = self.right_rotate(node.right)
                return self.left_rotate(node)
        return node

    # Function to delete a node with given key
    def delete(self, node, key):
        if node is None:
            return node
        if key < node.key:
            node.left = self.delete(node.left, key)
        elif key > node.key:
            node.right = self.delete(node.right, key)
        else:
            # Node with only one child or no child
            if node.left is None:
                temp = node.right
                node = None
                return temp
            elif node.right is None:
                temp = node.left
                node = None
                return temp

            # Node with two children: Get the inorder successor
            temp = self.get_min_value_node(node.right)
            node.key = temp.key
            node.value = temp.value
            node.right = self.delete(node.right, temp.key)

        if node is None:
            return node

        # Update height of the current node
        node.height = 1 + max(self.get_height(node.left), self.get_height(node.right))

        # Get the balance factor
        balance = self.get_balance(node)

        # Rebalance the tree if needed
        if balance > 1:
            if self.get_balance(node.left) >= 0:
                return self.right_rotate(node)
            else:
                node.left = self.left_rotate(node.left)
                return self.right_rotate(node)
        elif balance < -1:
            if self.get_balance(node.right) <= 0:
                return self.left_rotate(node)
            else:
                node.right = self.right_rotate(node.right)
                return self.left_rotate(node)
        return node

    # Function to get the node with minimum key value in subtree rooted at node
    def get_min_value_node(self, node):
        current = node
        while current.left is not None:
            current = current.left
        return current

    # Function to search for a node with given key
    def search(self, node, key):
        if node is None or node.key == key:
            return node
        if key < node.key:
            return self.search(node.left, key)
        return self.search(node.right, key)

    # Function to perform inorder traversal
    def inorder_traversal(self, node):
        if node:
            self.inorder_traversal(node.left)
            print(f"{node.key}: {node.value}")
            self.inorder_traversal(node.right)

    # Function to perform reverse inorder traversal
    def reverse_inorder_traversal(self, node):
        if node:
            self.reverse_inorder_traversal(node.right)
            print(f"{node.key}: {node.value}")
            self.reverse_inorder_traversal(node.left)

# Menu-driven program
def menu():
    print("1. Add a new keyword")
    print("2. Delete a keyword")
    print("3. Update the value of a keyword")
    print("4. Display data sorted in ascending order")
    print("5. Display data sorted in descending order")
    print("6. Find maximum comparisons required for finding any keyword")
    print("7. Exit")

if __name__ == "__main__":
    avl_tree = AVLTree()
    while True:
        menu()
        choice = int(input("Enter your choice: "))
        if choice == 1:
            key = input("Enter the keyword: ")
            value = input("Enter the meaning: ")
            avl_tree.root = avl_tree.insert(avl_tree.root, key, value)
            print("Keyword added successfully.")
        elif choice == 2:
            key = input("Enter the keyword to delete: ")
            avl_tree.root = avl_tree.delete(avl_tree.root, key)
            print("Keyword deleted successfully.")
        elif choice == 3:
            key = input("Enter the keyword to update: ")
            value = input("Enter the new meaning: ")
            node = avl_tree.search(avl_tree.root, key)
            if node:
                node.value = value
                print("Keyword updated successfully.")
            else:
                print("Keyword not found.")
        elif choice == 4:
            print("Data sorted in ascending order:")
            avl_tree.inorder_traversal(avl_tree.root)
        elif choice == 5:
            print("Data sorted in descending order:")
            avl_tree.reverse_inorder_traversal(avl_tree.root)
        elif choice == 6:
            max_comparisons = math.ceil(math.log2(avl_tree.get_height(avl_tree.root) + 1))
            print(f"Maximum comparisons required: {max_comparisons}")
        elif choice == 7:
            print("Exiting program.")
            break
